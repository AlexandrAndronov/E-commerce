/* подключение шрифта */
@font-face {
  /* название шрифта */
  font-family: "Objective";
  /* адрес шрифта */
  src: url("../fonts/Objective-Regular.otf") format("truetype");
  font-style: normal;
  font-weight: normal;
}


* {
  margin: 0;
  padding: 0;
  border: none;
  outline: none;
}
li {
  list-style: none;
}
a {
  text-decoration: none;
}








/* стили основной обертки */
div.main_wrapper {
  max-width: 1440px;
  margin: 0 auto;
  font-family: 'Helvetica';
}









/* внутри каждого основного блога необходимо
выставить общие внутрненние боковые отступы.
В этом проекте решил это сделать отдельно
в каждом блоке */
header {
  padding-left: 10%;
  padding-right: 10%;
}



nav.navbar {
  /* отступ сверху для контента навбара */
  padding-top: 45px;
}











/* Стили для логотипа */
div.logo {
  width: 128px;
  height: 42px;
  font-family: 'Objective-Regular', sans-serif;
  font-weight: bold;
  font-size: 40px;
}










/* назначение цвета для логотипа.
Сделал с помощью селектора дочерних элементов.
В данном случае стили применяются к ссылкам, которые являются
дочерним элементом дивов с классом logo.
Подчеркиваю, что ссылка должна являться прямым дочерним элементом, а не
каки-то потомком дива*/
div.logo > a {
  color: #4a99d3;
}










/* градиент для header */
header {
  /* значение до первой запятой - это угол под которым будет направлен градиент.
  точка отсчета всегда идет снизу блока. 0deg это было бы вверх ногами. Надо сделать 180deg
  чтобы сверху вниз был градиент.
  Также можно указать словами направление to bottom
  Дальше идут значения - точки окончания действия промежутка градиента.
  Указать цвет и процент на котором данная часть градиента перестанет действовать.
  Одна точка это от запятой до запятой. #4a99d3 -50% это состовляющие одной точки. и тд

  В данном случае на первой точке указан вообще отрицательный процент действия градиента
  так как он должен быть совсем еле заметным, легким. Правило такое, что чем ближе
  точка градиента к краю тем она ярче.
  вторая точна задана начиная с rgba(...) это тоже цветовая схема только с альфа каналом 'a'
  который позволяет сделать прозрачность в отличие от цветовой гаммы HEX #...
  и уже эта точка заканчивает свое действие на 75 % блока*/
  background: linear-gradient(180deg, #4a99d3 -50%, rgba(74, 153, 211, 0) 75%);
  /* фиксированная высота header как в макете */
  height: 768px;
  /* тень для снизу header
  1 параметр это ось x
  2 параметр - ось Y
  3 параметр - размытие
  4 параметр - дальность размытия
  цвет с альфа каналом прозрачности */
  box-shadow: 2px 2px 10px 4px rgba(100, 100, 100, 0.1);
}







/* спецификации меню */
/* для родителя менюа необходимо задать
display: flex , чтобы все его дочерние элементы
стали строчными и встали в одну строку, а также чтобы
была возможность весь список ul откинуть полностью вправо
свойством margin-left: auto, потому что без флекса оно работать не будет */
nav.navbar {
  display: flex;
}
/* теперь надо сделать отступ между пунктами меню.
в данном случае селектор интерпретируется следующим образом -
стили относятся к пунтам меню, которые являются дочерними
(об этом говорит знак >) у списка ul с классом nav_menu
а псевдокласс :nth-last-child(n+2) уточняет то, что стили нужно применить
именно ко всем элементам кроме последнего*/
/* nth - это значит надо считать
last - это значит отчет будет производиться с последнего пункта
(n+2)  это мат формула, где вместо n податсвляется нуль и производится расчет
в данном случае получается число 2 а это значит что стили будут вступать в силу
со второго элемента */
ul.nav_menu > li:nth-last-child(n+2) {
  margin-right: 50px;
}

/* цвет ссылок в меню */
ul.nav_menu > li > a {
  color: #000;
  /* вес шрифта */
  font-weight: 100;
}
/* цвет ссылок в меню при наведении */
ul.nav_menu > li > a:hover {
  color: #4a99d3;
}


ul.nav_menu {
  /* дочерние элементы должны стать строчыми */
  display: flex;
  /* уводим блок меню вправо. без флекса это не работает */
  margin-left: auto;
}








/* стили для блока с текстом над кнопками */
.text_header_and_button {
  width: 40%;
  margin-top: 180px;
  font-weight: 100;
  display: inline-block;
}
/* стили для заголовка */
.text_header_and_button > h1 {
  font-weight: 500;
  margin-bottom: 14px;
}
/* стили для текста под заголовком */
p.header_text {
  margin-bottom: 60px;
}




/* чтобы два блока (блок с заголоком текстом и кнопками и
блок с телефонам) втсали в одну линию необходимо их обоих
сделать строчными в данном случае через display: inline-block */
.img_mobile {
  /* относительное позиционирование чтобы
  потом задать смещение для дочерней мобилки */
  position: relative;
  margin-left: 150px;
  /* пришлось применить именно это свойство, чтобы
  этот блок по-мимо того чтобы стать строчным еще внутри себя
  сделал элементы в строку и более послушными.
  Именно поэтому картинки мобилок пришлось обернуть в обертку из дивов чтобы
  они слушались меня как блоки, а не как картинки. */
  display: inline-flex;
}

/* стили для смещения левой мобилки
ей задано относительное позиционирование и ее родителю тоже */
img.left_mobile {
  position: relative;
  left: 100px;
  top: 100px;
}







/* основные спецификации кнопок */
.button {
  width: 180px;
  height: 60px;
  cursor: pointer;
  background-color: #4a99d3;
  border-radius: 5px;
  /* для того чтобы кнопка, которая реализована через ссылку
  приняла твои параметры ширины и высоты, а также background
  нужно сделать ее не строчным элементом, а блочным */
  display: inline-block;
  position: relative;
}
/* центрирование изображения внутри кнопки */
img.img_button {
  position: absolute;
  top: 22%;
  left: 12%;
}
/* спецификации анимации кнопок при наведении */
.button:hover {
  /* тень кнопок при наведение */
  box-shadow: 3px 3px 10px 2px rgba(100, 100, 100, 0.5);
  /* движение фона кнопок при наведении */

  /* Время, скорость теней */
  transition: 0.5s;
}

/* отступ, расстояние между кнопками */
/* в данном случае применен псевдокласс, который уточняет некоторые моменты.
здесь это означает, что у какого-либо элемента есть несколько дочерних ссылок
и стили, которые написаны здесь будут относиться к первым ссылкам в этих элементах */
a:first-of-type {
  margin-right: 20px;
}


/* анимация изображения в кнопке при наведении */
/* навдение заточено на фон кнопки, а не на само изображение, но
стили применяются к изображению в кнопке */
a.button:hover>img {
  /* тень изображения при наведении на кнопку*/
  filter: drop-shadow(2px 2px 2px #000);
  /* также необходимо сделать, чтобы данная тень работала в браузерах
  на движке Chromium */
  -webkit-filter: drop-shadow(2px 2px 2px #000);
  /* Скорость анимации.
  в данном случае появления тени изображения
  и вертелки при наведени на кнопки */
  transition: all 0.5s ease;
  /* Видоизменения изображения в кнопке при наведении на кнопку
  сдвиг по оси Y и вращение на 360 градусов и завершение перемещения
  в изначальной точке*/
  transform: translateY(-10px) rotateX(360deg);
}












/* aaaaaaaaaa */
